import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
from io import BytesIO
import os
import numpy as np
from datetime import datetime, timedelta
import json

# ------------- PRODUCTION CONFIG ----------------
st.set_page_config(
    page_title="SAR Dashboard - ‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡∏ô‡∏ß‡∏±‡∏ï‡∏Å‡∏£‡∏£‡∏°‡∏ß‡∏¥‡∏ä‡∏≤‡∏ä‡∏µ‡∏û", 
    layout="wide",
    initial_sidebar_state="expanded",
    page_icon="üìä",
    menu_items={
        'Get Help': 'https://your-help-link.com',
        'Report a bug': 'https://your-bug-report-link.com',
        'About': """
        # SAR Dashboard ‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡∏ô‡∏ß‡∏±‡∏ï‡∏Å‡∏£‡∏£‡∏°‡∏ß‡∏¥‡∏ä‡∏≤‡∏ä‡∏µ‡∏û
        
        ‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏á‡∏≤‡∏ô‡∏ï‡∏≤‡∏°‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô
        
        **‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô:** 3.0 Multi-Year Production
        **‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÇ‡∏î‡∏¢:** IT Support Team
        """
    }
)

# Enhanced CSS for production
st.markdown("""
<style>
    /* Import Google Fonts */
    @import url('https://fonts.googleapis.com/css2?family=Prompt:wght@300;400;500;600;700&display=swap');
    
    /* Global Styles */
    .stApp {
        font-family: 'Prompt', sans-serif;
    }
    
    .main-header {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 50%, #f093fb 100%);
        padding: 2.5rem;
        border-radius: 15px;
        margin-bottom: 2rem;
        text-align: center;
        color: white;
        box-shadow: 0 10px 30px rgba(0,0,0,0.2);
        animation: fadeIn 1s ease-in;
    }
    
    @keyframes fadeIn {
        from { opacity: 0; transform: translateY(-20px); }
        to { opacity: 1; transform: translateY(0); }
    }
    
    .metric-card {
        background: white;
        padding: 1.8rem;
        border-radius: 12px;
        box-shadow: 0 4px 15px rgba(0,0,0,0.1);
        border-left: 5px solid #667eea;
        margin-bottom: 1rem;
        transition: all 0.3s ease;
    }
    
    .metric-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 8px 25px rgba(0,0,0,0.15);
    }
    
    .sidebar-section {
        background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
        padding: 1.2rem;
        border-radius: 10px;
        margin-bottom: 1.5rem;
        border-left: 4px solid #667eea;
    }
    
    .info-box {
        background: linear-gradient(135deg, #e3f2fd 0%, #bbdefb 100%);
        padding: 1rem;
        border-radius: 8px;
        border-left: 4px solid #2196f3;
        margin: 1rem 0;
    }
    
    .warning-box {
        background: linear-gradient(135deg, #fff8e1 0%, #ffecb3 100%);
        padding: 1rem;
        border-radius: 8px;
        border-left: 4px solid #ff9800;
        margin: 1rem 0;
    }
    
    .success-box {
        background: linear-gradient(135deg, #e8f5e8 0%, #c8e6c9 100%);
        padding: 1rem;
        border-radius: 8px;
        border-left: 4px solid #4caf50;
        margin: 1rem 0;
    }
    
    /* Loading Animation */
    .loading-spinner {
        display: inline-block;
        width: 20px;
        height: 20px;
        border: 3px solid #f3f3f3;
        border-top: 3px solid #667eea;
        border-radius: 50%;
        animation: spin 1s linear infinite;
    }
    
    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
    
    /* Responsive Design */
    @media (max-width: 768px) {
        .main-header {
            padding: 1.5rem;
        }
        .metric-card {
            padding: 1rem;
        }
    }
</style>
""", unsafe_allow_html=True)

# ------------ CONFIGURATION WITH ENVIRONMENT VARIABLES ----------------
# ‡πÉ‡∏ä‡πâ Environment Variables ‡∏´‡∏£‡∏∑‡∏≠ Streamlit Secrets
try:
    # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Streamlit Cloud
    MAIN_SHEET_ID = st.secrets.get("GOOGLE_SHEET_ID", "1E5Eo7DkgY0XYxCLcY9II5vH_citjCNcCJ9QBPIAs-BY")
except:
    # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Local Development
    MAIN_SHEET_ID = os.getenv("GOOGLE_SHEET_ID", "1E5Eo7DkgY0XYxCLcY9II5vH_citjCNcCJ9QBPIAs-BY")

YEARS = list(range(2567, 2579))  # 2567-2578 (12 years)

# Configuration ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏õ‡∏µ - ‡∏£‡∏∞‡∏ö‡∏∏ gid ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏õ‡∏µ
SHEET_CONFIGS = {
    2567: "0",
    2568: "391457022",
    2569: "1262210076",
    2570: "434200182",
    2571: "39531981",
    2572: "635418211",
    2573: "35307857",
    2574: "1330941169",
    2575: "857387421",
    2576: "855467636",
    2577: "76253826",
    2578: "1563844631",
}

# ------------ HEADER ----------------
st.markdown("""
<div class="main-header">
    <h1>üìä SAR Dashboard ‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡∏ô‡∏ß‡∏±‡∏ï‡∏Å‡∏£‡∏£‡∏°‡∏ß‡∏¥‡∏ä‡∏≤‡∏ä‡∏µ‡∏û</h1>
    <h2>‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ú‡∏•‡∏ï‡∏≤‡∏°‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô (2567-2578)</h2>
    <p>üöÄ <strong>‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô Production 3.0</strong> | ‡∏£‡∏∞‡∏ö‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏£‡∏ö‡∏ß‡∏á‡∏à‡∏£</p>
</div>
""", unsafe_allow_html=True)

# ------------ ERROR HANDLING & LOGGING ----------------
@st.cache_data(ttl=600)  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ß‡∏•‡∏≤ cache ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö production
def load_year_data_production(year):
    """‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î ‡∏û‡∏£‡πâ‡∏≠‡∏° Error Handling ‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á"""
    try:
        gid = SHEET_CONFIGS.get(year)
        
        if not gid:
            st.error(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤ gid ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏µ {year}")
            return None
        
        # ‡πÅ‡∏™‡∏î‡∏á Loading State
        with st.spinner(f'üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏µ {year}...'):
            sheet_url = f"https://docs.google.com/spreadsheets/d/{MAIN_SHEET_ID}/export?format=csv&gid={gid}"
            
            try:
                df = pd.read_csv(sheet_url, encoding='utf-8')
                
                if df.empty:
                    st.warning(f"‚ö†Ô∏è ‡πÅ‡∏ú‡πà‡∏ô‡∏á‡∏≤‡∏ô gid={gid} ‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤")
                    return None
                
                # Data Cleaning
                df = df.dropna(subset=["‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à"])
                df.columns = df.columns.str.strip()
                
                # Score Processing
                score_column = None
                for col in ["‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à", "‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô", "Score"]:
                    if col in df.columns:
                        score_column = col
                        break
                
                if score_column:
                    df["‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô"] = pd.to_numeric(df[score_column], errors="coerce")
                    df = df.dropna(subset=["‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô"])
                else:
                    st.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏µ {year}")
                    return None
                
                # Standard Assignment
                df["‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô"] = ""
                for idx, row in df.iterrows():
                    actual_row = idx + 2
                    
                    if 2 <= actual_row <= 13:
                        df.loc[idx, "‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô"] = "‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡∏ó‡∏µ‡πà 1"
                    elif 14 <= actual_row <= 30:
                        df.loc[idx, "‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô"] = "‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡∏ó‡∏µ‡πà 2"
                    elif 31 <= actual_row <= 34:
                        df.loc[idx, "‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô"] = "‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡∏ó‡∏µ‡πà 3"
                
                df = df[df["‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô"] != ""]
                df["‡∏õ‡∏µ"] = year
                
                if not df.empty:
                    st.success(f"‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏µ {year} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ({len(df)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)")
                    return df
                else:
                    st.warning(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏µ {year}")
                    return None
                    
            except pd.errors.EmptyDataError:
                st.error(f"‚ùå ‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏µ {year} ‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤")
                return None
            except pd.errors.ParserError as e:
                st.error(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏µ {year}: {e}")
                return None
            except Exception as e:
                st.error(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏: {e}")
                return None
                
    except Exception as e:
        st.error(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡∏∞‡∏ö‡∏ö: {e}")
        return None

# ------------ SIDEBAR CONFIGURATION ----------------
with st.sidebar:
    st.markdown("""
    <div class="sidebar-section">
        <h3>üéõÔ∏è ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡πÅ‡∏îÿ¥‡∏ö‡∏≠‡∏£‡πå‡∏î</h3>
        <p><strong>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:</strong> üü¢ Online</p>
        <p><strong>‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï:</strong> """ + datetime.now().strftime("%d/%m/%Y %H:%M") + """</p>
    </div>
    """, unsafe_allow_html=True)
    
    # Connection Test
    if st.button("üîç ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠", key="connection_test"):
        with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö..."):
            total_connections = 0
            successful_connections = 0
            
            for year in YEARS[:3]:  # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏Ñ‡πà 3 ‡∏õ‡∏µ‡πÅ‡∏£‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î‡πÄ‡∏ß‡∏•‡∏≤
                gid = SHEET_CONFIGS.get(year)
                total_connections += 1
                
                try:
                    test_url = f"https://docs.google.com/spreadsheets/d/{MAIN_SHEET_ID}/export?format=csv&gid={gid}"
                    test_df = pd.read_csv(test_url, nrows=1)  # ‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏Ñ‡πà‡πÅ‡∏ñ‡∏ß‡πÅ‡∏£‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏î‡∏™‡∏≠‡∏ö
                    successful_connections += 1
                    st.success(f"‚úÖ ‡∏õ‡∏µ {year}: ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                except:
                    st.error(f"‚ùå ‡∏õ‡∏µ {year}: ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
            
            connection_rate = (successful_connections / total_connections * 100)
            
            if connection_rate == 100:
                st.success(f"üéâ ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠: {connection_rate:.0f}% - ‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
            elif connection_rate >= 50:
                st.warning(f"‚ö†Ô∏è ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠: {connection_rate:.0f}% - ‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô")
            else:
                st.error(f"üö® ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠: {connection_rate:.0f}% - ‡∏£‡∏∞‡∏ö‡∏ö‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤")
    
    st.markdown("### üìÖ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏´‡∏°‡∏î‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå")
    
    analysis_mode = st.radio(
        "‡πÇ‡∏´‡∏°‡∏î‡∏Å‡∏≤‡∏£‡∏î‡∏π",
        ["üìä ‡∏õ‡∏µ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß", "üìà ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡∏õ‡∏µ", "üîÆ ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"],
        help="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"
    )
    
    if analysis_mode == "üìä ‡∏õ‡∏µ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß":
        selected_years = [st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏µ", YEARS, index=0)]
    elif analysis_mode == "üìà ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡∏õ‡∏µ":
        selected_years = st.multiselect(
            "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£", 
            YEARS, 
            default=[2567, 2568, 2569],
            help="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏î‡πâ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 5 ‡∏õ‡∏µ"
        )
        if len(selected_years) > 5:
            st.warning("‚ö†Ô∏è ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏î‡πâ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 5 ‡∏õ‡∏µ")
            selected_years = selected_years[:5]
        if not selected_years:
            selected_years = [2567]
    else:
        selected_years = YEARS
    
    st.markdown("### ‚öôÔ∏è ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤")
    
    chart_theme = st.selectbox(
        "üé® ‡∏ò‡∏µ‡∏°‡∏Å‡∏£‡∏≤‡∏ü", 
        ["plotly", "plotly_white", "plotly_dark", "seaborn"],
        index=1
    )
    
    show_targets = st.checkbox("üéØ ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢", value=True)
    auto_refresh = st.checkbox("üîÑ ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥", value=False)
    
    if auto_refresh:
        refresh_interval = st.slider("‚è±Ô∏è ‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä (‡∏ô‡∏≤‡∏ó‡∏µ)", 5, 60, 15)
        if st.button("üîÑ ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏ó‡∏±‡∏ô‡∏ó‡∏µ"):
            st.cache_data.clear()
            st.rerun()

# ------------ DATA LOADING ----------------
def load_selected_data():
    """‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å"""
    all_data = []
    loading_progress = st.progress(0)
    status_text = st.empty()
    
    for i, year in enumerate(selected_years):
        status_text.text(f"‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏µ {year}...")
        progress = (i + 1) / len(selected_years)
        loading_progress.progress(progress)
        
        year_data = load_year_data_production(year)
        if year_data is not None and not year_data.empty:
            all_data.append(year_data)
    
    loading_progress.empty()
    status_text.empty()
    
    if all_data:
        combined_df = pd.concat(all_data, ignore_index=True)
        return combined_df
    else:
        return pd.DataFrame()

# ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
with st.container():
    if len(selected_years) == 1:
        st.info(f"üìä ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏µ {selected_years[0]}")
    else:
        st.info(f"üìà ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• {len(selected_years)} ‡∏õ‡∏µ")
    
    df = load_selected_data()
    
    if df.empty:
        st.error("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ")
        st.markdown("""
        <div class="warning-box">
            <h4>üí° ‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏∞:</h4>
            <ul>
                <li>‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ô‡πá‡∏ï</li>
                <li>‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ß‡πà‡∏≤ Google Sheets ‡πÄ‡∏õ‡πá‡∏ô Public</li>
                <li>‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏î‡πâ‡∏ß‡∏¢‡∏õ‡∏∏‡πà‡∏°‡πÉ‡∏ô‡πÅ‡∏ñ‡∏ö‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡πâ‡∏≤‡∏á</li>
            </ul>
        </div>
        """, unsafe_allow_html=True)
        st.stop()

# ------------ SUCCESS MESSAGE ----------------
if not df.empty:
    total_records = len(df)
    years_loaded = df["‡∏õ‡∏µ"].nunique()
    standards_covered = df["‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô"].nunique()
    
    st.markdown(f"""
    <div class="success-box">
        <h4>üéâ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!</h4>
        <p><strong>üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:</strong> {total_records:,} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</p>
        <p><strong>üìÖ ‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏°:</strong> {years_loaded} ‡∏õ‡∏µ</p>
        <p><strong>üéØ ‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏°:</strong> {standards_covered} ‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô</p>
    </div>
    """, unsafe_allow_html=True)

# ------------ MAIN DASHBOARD CONTENT ----------------
st.markdown("## üìà ‡∏ï‡∏±‡∏ß‡∏ä‡∏µ‡πâ‡∏ß‡∏±‡∏î‡∏´‡∏•‡∏±‡∏Å")

# KPIs
col1, col2, col3, col4 = st.columns(4)

with col1:
    total_tasks = len(df)
    st.markdown(f"""
    <div class="metric-card">
        <h2 style="color: #667eea; margin: 0;">{total_tasks:,}</h2>
        <p style="margin: 0; color: #666;">‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</p>
    </div>
    """, unsafe_allow_html=True)

with col2:
    avg_score = df["‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô"].mean() if "‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô" in df.columns else 0
    st.markdown(f"""
    <div class="metric-card">
        <h2 style="color: #28a745; margin: 0;">{avg_score:.2f}</h2>
        <p style="margin: 0; color: #666;">‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏£‡∏ß‡∏°</p>
    </div>
    """, unsafe_allow_html=True)

with col3:
    if "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞" in df.columns:
        completed = len(df[df["‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"] == "‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô"])
        completion_rate = (completed / total_tasks * 100) if total_tasks > 0 else 0
    else:
        completion_rate = 0
    
    st.markdown(f"""
    <div class="metric-card">
        <h2 style="color: #ffc107; margin: 0;">{completion_rate:.1f}%</h2>
        <p style="margin: 0; color: #666;">‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à</p>
    </div>
    """, unsafe_allow_html=True)

with col4:
    above_target = len(df[df["‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô"] >= 4.0]) if "‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô" in df.columns else 0
    target_rate = (above_target / total_tasks * 100) if total_tasks > 0 else 0
    
    st.markdown(f"""
    <div class="metric-card">
        <h2 style="color: #17a2b8; margin: 0;">{target_rate:.1f}%</h2>
        <p style="margin: 0; color: #666;">‡πÄ‡∏´‡∏ô‡∏∑‡∏≠‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢</p>
    </div>
    """, unsafe_allow_html=True)

# ------------ VISUALIZATION ----------------
st.markdown("## üìä ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")

# Chart selection
viz_type = st.selectbox(
    "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•",
    ["üìä ‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°", "üìà ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°", "üéØ ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô", "üìã ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"]
)

if viz_type == "üìä ‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°":
    col1, col2 = st.columns(2)
    
    with col1:
        if "‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô" in df.columns and "‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô" in df.columns:
            avg_by_standard = df.groupby("‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô")["‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô"].mean().reset_index()
            
            fig_radar.update_layout(
            polar=dict(
                radialaxis=dict(
                    visible=True,
                    range=[0, 5]
                )
            ),
            showlegend=True,
            title="Radar Chart ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô",
            template=chart_theme,
            height=500
        )
        
        st.plotly_chart(fig_radar, use_container_width=True)

elif viz_type == "üìã ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•":
    st.markdown("### üìã ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î")
    
    # Filters
    filter_col1, filter_col2, filter_col3 = st.columns(3)
    
    with filter_col1:
        if "‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô" in df.columns:
            standard_filter = st.selectbox(
                "üéØ ‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô",
                ["‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"] + list(df["‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô"].unique())
            )
        else:
            standard_filter = "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"
    
    with filter_col2:
        if "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞" in df.columns:
            status_filter = st.selectbox(
                "üìä ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞",
                ["‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"] + list(df["‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"].unique())
            )
        else:
            status_filter = "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"
    
    with filter_col3:
        if len(selected_years) > 1:
            year_filter = st.selectbox(
                "üìÖ ‡∏õ‡∏µ",
                ["‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"] + selected_years
            )
        else:
            year_filter = "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"
    
    # Apply filters
    filtered_df = df.copy()
    
    if standard_filter != "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î":
        filtered_df = filtered_df[filtered_df["‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô"] == standard_filter]
    
    if status_filter != "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î":
        filtered_df = filtered_df[filtered_df["‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"] == status_filter]
    
    if year_filter != "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î":
        filtered_df = filtered_df[filtered_df["‡∏õ‡∏µ"] == year_filter]
    
    # Display filtered data
    if not filtered_df.empty:
        display_cols = ["‡∏õ‡∏µ", "‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô", "‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à", "‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô", "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"]
        available_cols = [col for col in display_cols if col in filtered_df.columns]
        
        st.dataframe(
            filtered_df[available_cols].sort_values("‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô", ascending=False),
            use_container_width=True,
            height=400
        )
        
        st.info(f"üìä ‡πÅ‡∏™‡∏î‡∏á {len(filtered_df)} ‡∏à‡∏≤‡∏Å {len(df)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
    else:
        st.warning("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç")

# ------------ EXPORT SECTION ----------------
st.markdown("## üì• ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")

export_col1, export_col2 = st.columns(2)

with export_col1:
    if st.button("üìä ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å Excel", use_container_width=True):
        output = BytesIO()
        
        with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
            # Main data
            df.to_excel(writer, index=False, sheet_name='‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏Å')
            
            # Summary
            if "‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô" in df.columns:
                summary = df.groupby("‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô")["‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô"].agg([
                    'count', 'mean', 'min', 'max', 'std'
                ]).round(2)
                summary.to_excel(writer, sheet_name='‡∏™‡∏£‡∏∏‡∏õ')
        
        st.download_button(
            label="üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î Excel",
            data=output.getvalue(),
            file_name=f"SAR_Report_{datetime.now().strftime('%Y%m%d_%H%M')}.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        )

with export_col2:
    if st.button("üìã ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å CSV", use_container_width=True):
        csv_data = df.to_csv(index=False, encoding='utf-8-sig')
        
        st.download_button(
            label="üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î CSV",
            data=csv_data,
            file_name=f"SAR_Data_{datetime.now().strftime('%Y%m%d_%H%M')}.csv",
            mime="text/csv"
        )

# ------------ FOOTER ----------------
st.markdown("---")

footer_col1, footer_col2, footer_col3 = st.columns(3)

with footer_col1:
    st.markdown("""
    **üìä SAR Dashboard**
    
    ‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ú‡∏•
    
    ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô: 3.0 Production
    """)

with footer_col2:
    st.markdown("""
    **üîó ‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå**
    
    [üìñ ‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô](#)
    
    [üêõ ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏±‡∏ç‡∏´‡∏≤](#)
    """)

with footer_col3:
    st.markdown("""
    **üìû ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠**
    
    IT Support Team
    
    üìß support@college.ac.th
    """)

# Auto refresh functionality
if auto_refresh:
    import time
    time.sleep(refresh_interval * 60)
    st.rerun()bar = px.bar(
                avg_by_standard,
                x="‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô",
                y="‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô",
                title="‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô",
                color="‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô",
                color_continuous_scale="Viridis"
            )
            
            fig_bar.update_layout(
                template=chart_theme,
                height=400,
                yaxis=dict(range=[0, 5])
            )
            
            if show_targets:
                fig_bar.add_hline(y=4.0, line_dash="dash", line_color="red")
            
            st.plotly_chart(fig_bar, use_container_width=True)
    
    with col2:
        if "‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô" in df.columns:
            fig_hist = px.histogram(
                df,
                x="‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô",
                nbins=20,
                title="‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô",
                color_discrete_sequence=["#667eea"]
            )
            
            fig_hist.update_layout(
                template=chart_theme,
                height=400
            )
            
            if show_targets:
                fig_hist.add_vline(x=4.0, line_dash="dash", line_color="red")
            
            st.plotly_chart(fig_hist, use_container_width=True)

elif viz_type == "üìà ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°" and len(selected_years) > 1:
    yearly_trend = df.groupby("‡∏õ‡∏µ")["‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô"].mean().reset_index()
    
    fig_trend = px.line(
        yearly_trend,
        x="‡∏õ‡∏µ",
        y="‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô",
        title="‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏ï‡∏≤‡∏°‡∏õ‡∏µ",
        markers=True,
        line_shape="spline"
    )
    
    fig_trend.update_layout(
        template=chart_theme,
        height=500,
        yaxis=dict(range=[0, 5])
    )
    
    if show_targets:
        fig_trend.add_hline(y=4.0, line_dash="dash", line_color="red")
    
    st.plotly_chart(fig_trend, use_container_width=True)

elif viz_type == "üéØ ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô":
    if "‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô" in df.columns and "‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô" in df.columns:
        standards_comparison = df.groupby("‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô")["‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô"].agg([
            'mean', 'median', 'std', 'count'
        ]).round(2)
        
        standards_comparison.columns = ["‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢", "‡∏Ñ‡πà‡∏≤‡∏°‡∏±‡∏ò‡∏¢‡∏ê‡∏≤‡∏ô", "‡∏™‡πà‡∏ß‡∏ô‡πÄ‡∏ö‡∏µ‡πà‡∏¢‡∏á‡πÄ‡∏ö‡∏ô", "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô"]
        standards_comparison = standards_comparison.reset_index()
        
        st.dataframe(standards_comparison, use_container_width=True)
        
        # Radar Chart
        fig_radar = go.Figure()
        
        fig_radar.add_trace(go.Scatterpolar(
            r=standards_comparison["‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢"],
            theta=standards_comparison["‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô"],
            fill='toself',
            name='‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢'
        ))
        
        fig_